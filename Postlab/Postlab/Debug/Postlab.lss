
Postlab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000324  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800180  00800180  00000438  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f9  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f6  00000000  00000000  00000df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ff  00000000  00000000  000014e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d3  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019b  00000000  00000000  00001db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e8       	ldi	r26, 0x80	; 128
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 38       	cpi	r26, 0x84	; 132
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 32 01 	call	0x264	; 0x264 <main>
  9e:	0c 94 90 01 	jmp	0x320	; 0x320 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
}


void initUART9600(void){
	//settigns for RX and TX
	DDRD &= ~(1 << DDD0);		//Rx as input
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD1);		//TX as output
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//Fast mode, U2X0
	UCSR0A = 0;
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	UCSR0A |= (1 << U2X0);
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	
	//Settigns for register B
	UCSR0B = 0;
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	UCSR0B |= (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0); //ISR, enable for RX and TX
  c4:	80 81       	ld	r24, Z
  c6:	88 69       	ori	r24, 0x98	; 152
  c8:	80 83       	st	Z, r24
	
	// settigns for register C
	UCSR0C = 0;
  ca:	e2 ec       	ldi	r30, 0xC2	; 194
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);		// character size: 8 bits, no parity, 1 stop bit
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
	
	//Baudrate
	UBRR0 = 207;		// 9600
  d6:	8f ec       	ldi	r24, 0xCF	; 207
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  e2:	08 95       	ret

000000e4 <writeText>:
}


void writeText(char* text){
  e4:	ac 01       	movw	r20, r24
	//uint8_t i;
	for (uint8_t i = 0; text[i] != '\0'; i++)
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <writeText+0x14>
	{
		while(!(UCSR0A & (1 << UDRE0)));
  ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ee:	95 ff       	sbrs	r25, 5
  f0:	fc cf       	rjmp	.-8      	; 0xea <writeText+0x6>
		UDR0 = text[i];
  f2:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}


void writeText(char* text){
	//uint8_t i;
	for (uint8_t i = 0; text[i] != '\0'; i++)
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	fa 01       	movw	r30, r20
  fa:	e2 0f       	add	r30, r18
  fc:	f1 1d       	adc	r31, r1
  fe:	30 81       	ld	r19, Z
 100:	31 11       	cpse	r19, r1
 102:	f3 cf       	rjmp	.-26     	; 0xea <writeText+0x6>
	{
		while(!(UCSR0A & (1 << UDRE0)));
		UDR0 = text[i];
	}
}
 104:	08 95       	ret

00000106 <menu>:
//                                 Funciones
//*****************************************************************************


void menu(void){
	writeText("\n\n\n   *** MENU ***\n");
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 72 00 	call	0xe4	; 0xe4 <writeText>
	writeText("1. Leer potenciómetro\n");
 10e:	84 e1       	ldi	r24, 0x14	; 20
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 72 00 	call	0xe4	; 0xe4 <writeText>
	writeText("2. Enviar ASCII\n");
 116:	8b e2       	ldi	r24, 0x2B	; 43
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 72 00 	call	0xe4	; 0xe4 <writeText>
 11e:	08 95       	ret

00000120 <__vector_18>:
	}
}


//ISR, recieve
ISR(USART_RX_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	1f 92       	push	r1
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
	bufferRX = UDR0;
 14c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 150:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <bufferRX>
	
	//if buffer is emptym, if it is not, it waits
	while(!(UCSR0A & (1 << UDRE0)));
 154:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 158:	85 ff       	sbrs	r24, 5
 15a:	fc cf       	rjmp	.-8      	; 0x154 <__vector_18+0x34>
	/*UDR0 = bufferRX;
	PORTD = bufferRX;
	PORTB = 0x03 & bufferRX;*/
	char copyBuffer = bufferRX;
 15c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <bufferRX>
 160:	89 83       	std	Y+1, r24	; 0x01
	
	convertedBuffer = atoi(&copyBuffer);
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <atoi>
 16a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <convertedBuffer>
	
	if (sendChar != 1){
 16e:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <__data_end>
 172:	91 30       	cpi	r25, 0x01	; 1
 174:	91 f1       	breq	.+100    	; 0x1da <__vector_18+0xba>
		switch (convertedBuffer){
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	19 f0       	breq	.+6      	; 0x180 <__vector_18+0x60>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	99 f0       	breq	.+38     	; 0x1a4 <__vector_18+0x84>
 17e:	2a c0       	rjmp	.+84     	; 0x1d4 <__vector_18+0xb4>
			case 1:
				option = 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <option>
				UDR0 = bufferRX;
 186:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <bufferRX>
 18a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				writeText(" -> Caracter enviado");
 18e:	8c e3       	ldi	r24, 0x3C	; 60
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 72 00 	call	0xe4	; 0xe4 <writeText>
				writeText("\n\n");
 196:	81 e5       	ldi	r24, 0x51	; 81
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 72 00 	call	0xe4	; 0xe4 <writeText>
				menu();
 19e:	0e 94 83 00 	call	0x106	; 0x106 <menu>
				break;
 1a2:	2e c0       	rjmp	.+92     	; 0x200 <__vector_18+0xe0>
			
			case 2:
				option = 0;
 1a4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <option>
				sendChar = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
				UDR0 = bufferRX;
 1ae:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <bufferRX>
 1b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				writeText(" -> Caracter enviado");
 1b6:	8c e3       	ldi	r24, 0x3C	; 60
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 72 00 	call	0xe4	; 0xe4 <writeText>
				writeText("Envie un caracter...");
 1be:	84 e5       	ldi	r24, 0x54	; 84
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 72 00 	call	0xe4	; 0xe4 <writeText>
				writeText("\n\n");
 1c6:	81 e5       	ldi	r24, 0x51	; 81
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 72 00 	call	0xe4	; 0xe4 <writeText>
				PORTD = 0;
 1ce:	1b b8       	out	0x0b, r1	; 11
				PORTB = 0;
 1d0:	15 b8       	out	0x05, r1	; 5
				break;
 1d2:	16 c0       	rjmp	.+44     	; 0x200 <__vector_18+0xe0>
			
			default:
			option = 0;
 1d4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <option>
 1d8:	13 c0       	rjmp	.+38     	; 0x200 <__vector_18+0xe0>
		}
		
	}else {
		sendChar = 0;
 1da:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__data_end>
		UDR0 = bufferRX;
 1de:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <bufferRX>
 1e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		PORTD = bufferRX;
 1e6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <bufferRX>
 1ea:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0x03 & bufferRX;
 1ec:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <bufferRX>
 1f0:	83 70       	andi	r24, 0x03	; 3
 1f2:	85 b9       	out	0x05, r24	; 5
		writeText(" -> Caracter mostrado");
 1f4:	89 e6       	ldi	r24, 0x69	; 105
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 72 00 	call	0xe4	; 0xe4 <writeText>
		menu();
 1fc:	0e 94 83 00 	call	0x106	; 0x106 <menu>
	}
}
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <initADC>:
//*****************************************************************************
//                                     ADC
//*****************************************************************************

void initADC(void){
	ADMUX = 0;
 228:	ec e7       	ldi	r30, 0x7C	; 124
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	10 82       	st	Z, r1
	//Vref = AVcc = 5Vs
	ADMUX |= (1 << REFS0);
 22e:	80 81       	ld	r24, Z
 230:	80 64       	ori	r24, 0x40	; 64
 232:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 234:	80 81       	ld	r24, Z
 236:	8f 77       	andi	r24, 0x7F	; 127
 238:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR);	//left adjust
 23a:	80 81       	ld	r24, Z
 23c:	80 62       	ori	r24, 0x20	; 32
 23e:	80 83       	st	Z, r24
	
	ADCSRA = 0;
 240:	ea e7       	ldi	r30, 0x7A	; 122
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);	//turn on ADC
 246:	80 81       	ld	r24, Z
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//interruption
 24c:	80 81       	ld	r24, Z
 24e:	88 60       	ori	r24, 0x08	; 8
 250:	80 83       	st	Z, r24
	
	//prescaler 128 > 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 252:	80 81       	ld	r24, Z
 254:	87 60       	ori	r24, 0x07	; 7
 256:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC0D);	//disable PC0 digital input
 258:	ee e7       	ldi	r30, 0x7E	; 126
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
 262:	08 95       	ret

00000264 <main>:
uint8_t convertedBuffer = 0;
uint8_t sendChar = 0;

int main(void)
{
	cli();
 264:	f8 94       	cli
	DDRD = 0xFC;		//PD2 - PD7 as output
 266:	8c ef       	ldi	r24, 0xFC	; 252
 268:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x03;		//PB0 y PB1 as output
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1 << PINC0);	//pc0 as input
 26e:	87 b1       	in	r24, 0x07	; 7
 270:	8e 7f       	andi	r24, 0xFE	; 254
 272:	87 b9       	out	0x07, r24	; 7
	
	initUART9600();
 274:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	initADC();
 278:	0e 94 14 01 	call	0x228	; 0x228 <initADC>
	sei();
 27c:	78 94       	sei

	menu();
 27e:	0e 94 83 00 	call	0x106	; 0x106 <menu>
	
    while (1) 
    {
		if (option == 1){
 282:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <option>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	69 f4       	brne	.+26     	; 0x2a4 <main+0x40>
			ADCSRA |= (1 << ADSC);
 28a:	ea e7       	ldi	r30, 0x7A	; 122
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
			PORTD = ADCH;
 294:	e9 e7       	ldi	r30, 0x79	; 121
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	8b b9       	out	0x0b, r24	; 11
			PORTB = 0x03 & ADCH;
 29c:	80 81       	ld	r24, Z
 29e:	83 70       	andi	r24, 0x03	; 3
 2a0:	85 b9       	out	0x05, r24	; 5
 2a2:	ef cf       	rjmp	.-34     	; 0x282 <main+0x1e>
		}else{
			option = 0;
 2a4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <option>
 2a8:	ec cf       	rjmp	.-40     	; 0x282 <main+0x1e>

000002aa <__vector_21>:
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
	
	DIDR0 |= (1 << ADC0D);	//disable PC0 digital input
}

ISR (ADC_vect){
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	8f 93       	push	r24
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
	//PORTD = ADCH;			//show in portd value of adc
	ADCSRA |= (1 << ADIF);	//turn off flag
 2ba:	ea e7       	ldi	r30, 0x7A	; 122
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	80 61       	ori	r24, 0x10	; 16
 2c2:	80 83       	st	Z, r24
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	8f 91       	pop	r24
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <atoi>:
 2d4:	fc 01       	movw	r30, r24
 2d6:	88 27       	eor	r24, r24
 2d8:	99 27       	eor	r25, r25
 2da:	e8 94       	clt
 2dc:	21 91       	ld	r18, Z+
 2de:	20 32       	cpi	r18, 0x20	; 32
 2e0:	e9 f3       	breq	.-6      	; 0x2dc <atoi+0x8>
 2e2:	29 30       	cpi	r18, 0x09	; 9
 2e4:	10 f0       	brcs	.+4      	; 0x2ea <atoi+0x16>
 2e6:	2e 30       	cpi	r18, 0x0E	; 14
 2e8:	c8 f3       	brcs	.-14     	; 0x2dc <atoi+0x8>
 2ea:	2b 32       	cpi	r18, 0x2B	; 43
 2ec:	41 f0       	breq	.+16     	; 0x2fe <atoi+0x2a>
 2ee:	2d 32       	cpi	r18, 0x2D	; 45
 2f0:	39 f4       	brne	.+14     	; 0x300 <atoi+0x2c>
 2f2:	68 94       	set
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <atoi+0x2a>
 2f6:	0e 94 88 01 	call	0x310	; 0x310 <__mulhi_const_10>
 2fa:	82 0f       	add	r24, r18
 2fc:	91 1d       	adc	r25, r1
 2fe:	21 91       	ld	r18, Z+
 300:	20 53       	subi	r18, 0x30	; 48
 302:	2a 30       	cpi	r18, 0x0A	; 10
 304:	c0 f3       	brcs	.-16     	; 0x2f6 <atoi+0x22>
 306:	1e f4       	brtc	.+6      	; 0x30e <atoi+0x3a>
 308:	90 95       	com	r25
 30a:	81 95       	neg	r24
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	08 95       	ret

00000310 <__mulhi_const_10>:
 310:	7a e0       	ldi	r23, 0x0A	; 10
 312:	97 9f       	mul	r25, r23
 314:	90 2d       	mov	r25, r0
 316:	87 9f       	mul	r24, r23
 318:	80 2d       	mov	r24, r0
 31a:	91 0d       	add	r25, r1
 31c:	11 24       	eor	r1, r1
 31e:	08 95       	ret

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
